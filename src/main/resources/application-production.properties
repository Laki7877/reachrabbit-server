# App configuration
reachrabbit.token.header=X-Auth-Token
reachrabbit.request.attribute.user=UserRequest
reachrabbit.request.attribute.token=UserToken

#Cache
reachrabbit.cache.userrequest=userRequestCache

# Hash Password
reachrabbit.salt.workload=12

#JWT
reachrabbit.jwt.issuer=reachrabbit.com
reachrabbit.jwt.expire.hour=24
reachrabbit.jwt.expire.minute=0
reachrabbit.jwt.expire.second=0

# Pagination
spring.data.rest.defaultPageSize=10
spring.data.rest.maxPageSize=100

multipart.maxFileSize=-1
multipart.maxRequestSize=1024Mb


# Social Media
facebook.appKey=1648733485452450
facebook.appSecret=4b91f2874c4ca19562909841bacb2f07
youtube.appKey=486841241364-75hb5e24afp7msiitf8t36skfo3mr0h7.apps.googleusercontent.com
youtube.appSecret=3NzypP4Nlzg7VuNVuhCJi_i5
instagram.appKey=c428876109c44daa9a54cf568e96e483
instagram.appSecret=e5285f1f0a3a4cb59cebb89f52bc7c7b

# you can get into iam page [https://console.aws.amazon.com/iam/home]
cloud.aws.s3.path=https://reachrabbit-dev.s3-ap-southeast-1.amazonaws.com/
cloud.aws.credentials.accessKey=AKIAIEMT7NOW4XSK2F5A
cloud.aws.credentials.secretKey=FefUez+Qzq2KCEI0JUlS/R3PPD12QOUCO/5MSnCg

# example : ap-northeast-1
cloud.aws.region=ap-southeast-1

# example : s3-bucket-test-1
cloud.aws.s3.bucket=reachrabbit-dev


# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "netgloo_blog"
spring.datasource.connectionProperties=useUnicode=true;characterEncoding=utf-8;
spring.datasource.url = jdbc:mysql://localhost:3306/reachrabbitdb?useSSL=false&useUnicode=true&characterEncoding=UTF-8

# Username and password
spring.datasource.username = root
spring.datasource.password = root

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = validate
spring.jpa.hibernate.connection.useUnicode = true

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
